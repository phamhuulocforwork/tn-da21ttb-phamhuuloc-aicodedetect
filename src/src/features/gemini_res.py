import os
import csv
import time
import random
from google import genai
from dotenv import load_dotenv

load_dotenv()

client = genai.Client(api_key=os.getenv("GEMINI_API_KEY"))

def generate_code(prompt, language="C"):
    """Sinh code từ AI với prompt đã cho"""
    try:
        response = client.models.generate_content(
            model="gemini-2.0-flash",
            contents=prompt
        )
        return response.text
    except Exception as e:
        print(f"[LỖI] {e}")
        return "// ERROR: Không thể sinh code"

def create_prompt_variations(problem_name, description, language="C"):    
    clean_desc = description.replace('\\r\\n', '\n').replace('\\n', '\n')
    clean_desc = clean_desc.replace('**', '').replace('*', '')
    clean_desc = clean_desc.replace('```', '').replace('----------', '')

    # NOTE: Các prompt khác nhau cho đa dạng về code
    # FIXME: Tối ưu prompt
    prompts = [
        # Prompt đơn giản và trực tiếp
        f"""Viết chương trình {language} giải bài tập sau:
Tên bài: {problem_name}
{clean_desc}

Yêu cầu:
- Code đơn giản, dễ hiểu cho sinh viên năm 1
- Có đầy đủ thư viện cần thiết`
- Có comment giải thích
- Code phải biên dịch được""",

        # Prompt với hướng dẫn từng bước
        f"""Hãy viết code {language} để giải quyết bài toán:
{problem_name}

Mô tả: {clean_desc}

Hướng dẫn:
1. Include các thư viện cần thiết
2. Viết hàm main()
3. Đọc input từ người dùng
4. Xử lý logic chính
5. In kết quả
6. Code đơn giản, sinh viên năm nhất có thể hiểu""",

        # Prompt tập trung vào cấu trúc cơ bản
        f"""Viết chương trình {language} cơ bản:
Bài: {problem_name}
{clean_desc}

Lưu ý:
- Sử dụng cú pháp {language} cơ bản
- Tránh code phức tạp
- Có comment tiếng Việt
- Đảm bảo compile được
- Phù hợp trình độ sinh viên năm 1""",

        # Prompt ngắn gọn
        f"""Code {language} cho bài tập:
{problem_name}
{clean_desc}

Yêu cầu: Code đơn giản, có comment, compile được.""",

        # Prompt với template
        f"""Viết chương trình {language} theo template cơ bản:
#include <stdio.h> (nếu là C)
int main() {{}}

Bài tập: {problem_name}
{clean_desc}

Ghi chú: Code đơn giản cho người mới học lập trình."""
    ]
    
    return prompts

def main():
    csv_file = "src/dataset/c/csv/problems_extracted.csv"
    base_output_dir = "src/dataset/c/ai"
    os.makedirs(base_output_dir, exist_ok=True)
    submissions_per_problem = 5
        
    try:
        with open(csv_file, newline='', encoding='utf-8') as csvfile:
            reader = csv.DictReader(csvfile)
            
            # FIXME: Đang test nên chỉ chạy 1 bài thôi
            count = 0
            for row in reader:
                if count >= 1:
                    break 
                count += 1
                problem_id = row['id']
                problem_name = row['name']
                description = row['description']
                                
                problem_dir = os.path.join(base_output_dir, f"problem_{problem_id}")
                os.makedirs(problem_dir, exist_ok=True)
                
                prompts = create_prompt_variations(problem_name, description, "C")
                
                for i in range(submissions_per_problem):
                    print(f"  Đang tạo submission_{i+1}...")
                    
                    selected_prompt = random.choice(prompts)
                    ext = random.choice(['c', 'cpp'])
                    code = generate_code(selected_prompt, "C" if ext == 'c' else "C++")
                    filename = f"submission_{i+1}.{ext}"
                    filepath = os.path.join(problem_dir, filename)
                    
                    try:
                        with open(filepath, "w", encoding='utf-8') as f:
                            f.write(f"// Problem {problem_id}: {problem_name}\n")
                            f.write(f"// Generated by AI - Submission {i+1}\n")
                            f.write(f"// Language: {'C' if ext == 'c' else 'C++'}\n\n")
                            
                            # NOTE: Đảm bảo có include cần thiết nếu AI generate code không có
                            if "#include" not in code:
                                if ext == 'c':
                                    f.write("#include <stdio.h>\n")
                                    f.write("#include <stdlib.h>\n\n")
                                else:
                                    f.write("#include <iostream>\n")
                                    f.write("#include <cstdio>\n")
                                    f.write("using namespace std;\n\n")
                            
                            f.write(code)
                        
                        print(f"  Đã tạo: {filename}")
                        
                    except Exception as e:
                        print(f"  Lỗi khi lưu {filename}: {e}")
                    
                    # NOTE: Delay để tránh rate limit
                    time.sleep(1)
                
                print(f"  Đã xong Problem {problem_id}")
                
    except FileNotFoundError:
        print(f"Không tìm thấy file {csv_file}")
    except Exception as e:
        print(f"Lỗi: {e}")
    
if __name__ == "__main__":
    main()
